)
df_fertilizer <- dplyr::select(df,FIELD,CALENDAR_DATE,CPB_YIELD,FERTILIZER_SUM,FERTILIZER_ROLLSUM,
FERTILIZER_ROLLSUM_LAG6,FERTILIZER_ROLLSUM_LAG12)
fitted_models <- df_fertilizer %>%
group_by(FIELD) %>%
do(model=lm(CPB_YIELD~FERTILIZER_ROLLSUM,data=.))
model_stats <- fitted_models %>% glance(model)
model_stats$p_value_text <- ifelse(model_stats$p.value<0.01,", p < 0.01",paste0("p = ",round(model_stats$p.value,2)))
dat_text <- data.frame(
label = paste0("R sq. = ",round(model_stats$r.squared,2),", \n",model_stats$p_value_text),
FIELD   = levels(df_fertilizer$FIELD)
)
ggplot(df_fertilizer,aes(x=FERTILIZER_ROLLSUM,y=CPB_YIELD)) +
geom_point() +
theme_bw() +
ylab("Monthly yield (T/ha)") +
xlab("Fertilizer spend 6-month rolling sum (MYR/ha)") +
facet_wrap(vars(FIELD),scales = "free") +
geom_smooth(method = lm, se = FALSE) +
geom_text(
data    = dat_text,
mapping = aes(x = -Inf, y = Inf, label = label),
hjust   = 0,
vjust   = 1
)
df_fertilizer <- dplyr::select(df,FIELD,CALENDAR_DATE,CPB_YIELD,FERTILIZER_SUM,FERTILIZER_ROLLSUM,
FERTILIZER_ROLLSUM_LAG6,FERTILIZER_ROLLSUM_LAG12)
fitted_models <- df_fertilizer %>%
group_by(FIELD) %>%
do(model=lm(CPB_YIELD~FERTILIZER_ROLLSUM,data=.))
model_stats <- fitted_models %>% glance(model)
model_stats$p_value_text <- ifelse(model_stats$p.value<0.01,"p < 0.01",paste0("p = ",round(model_stats$p.value,2)))
dat_text <- data.frame(
label = paste0("R sq. = ",round(model_stats$r.squared,2),", \n",model_stats$p_value_text),
FIELD   = levels(df_fertilizer$FIELD)
)
ggplot(df_fertilizer,aes(x=FERTILIZER_ROLLSUM,y=CPB_YIELD)) +
geom_point() +
theme_bw() +
ylab("Monthly yield (T/ha)") +
xlab("Fertilizer spend 6-month rolling sum (MYR/ha)") +
facet_wrap(vars(FIELD),scales = "free") +
geom_smooth(method = lm, se = FALSE) +
geom_text(
data    = dat_text,
mapping = aes(x = -Inf, y = Inf, label = label),
hjust   = 0,
vjust   = 1
)
df_foliar <- dplyr::select(df,FIELD,CALENDAR_MONTH,CALENDAR_DATE,CPB_YIELD,CPB_YIELD_ANNUAL,NUTRIENT:NUTRIENT_AMOUNT_ANNUAL_LAG1,FERTILIZER_SUM,FERTILIZER_ROLLSUM)
fitted_models <- na.omit(df_foliar) %>%
group_by(NUTRIENT) %>%
do(model=lm(CPB_YIELD~NUTRIENT_AMOUNT,data=.))
model_stats <- fitted_models %>% glance(model)
dat_text <- data.frame(
label = paste0("R sq. = ",round(model_stats$r.squared,2),",\np = ",round(model_stats$p.value,2)),
NUTRIENT   = levels(df_foliar$NUTRIENT)
)
ggplot(na.omit(df_foliar),aes(x=NUTRIENT_AMOUNT,y=CPB_YIELD)) +
geom_point() +
theme_bw() +
ylab("Monthly yield (T/ha)") +
xlab("Foliar nutrient amount") +
facet_wrap(vars(NUTRIENT),scales="free") +
geom_smooth(method = lm, se = FALSE) +
geom_text(
data    = dat_text,
mapping = aes(x = -Inf, y = Inf, label = label),
hjust   = 0,
vjust   = 1
)
df_foliar <- dplyr::select(df,FIELD,CALENDAR_MONTH,CALENDAR_DATE,CPB_YIELD,CPB_YIELD_ANNUAL,NUTRIENT:NUTRIENT_AMOUNT_ANNUAL_LAG1,FERTILIZER_SUM,FERTILIZER_ROLLSUM)
fitted_models <- na.omit(df_foliar) %>%
group_by(NUTRIENT) %>%
do(model=lm(CPB_YIELD~NUTRIENT_AMOUNT,data=.))
model_stats <- fitted_models %>% glance(model)
model_stats$p_value_text <- ifelse(model_stats$p.value<0.01,"p < 0.01",paste0("p = ",round(model_stats$p.value,2)))
dat_text <- data.frame(
label = paste0("R sq. = ",round(model_stats$r.squared,2),",\n",model_stats$p_value_text),
NUTRIENT   = levels(df_foliar$NUTRIENT)
)
ggplot(na.omit(df_foliar),aes(x=NUTRIENT_AMOUNT,y=CPB_YIELD)) +
geom_point() +
theme_bw() +
ylab("Monthly yield (T/ha)") +
xlab("Foliar nutrient amount") +
facet_wrap(vars(NUTRIENT),scales="free") +
geom_smooth(method = lm, se = FALSE) +
geom_text(
data    = dat_text,
mapping = aes(x = -Inf, y = Inf, label = label),
hjust   = 0,
vjust   = 1
)
ggplot(na.omit(df_foliar),aes(x=FERTILIZER_SUM,y=NUTRIENT_AMOUNT)) +
geom_point() +
theme_bw() +
ylab("Foliar nutrient amount") +
xlab("Monthly fertilizer spend (MYR/ha)") +
facet_wrap(vars(NUTRIENT),scales="free")
ggplot(na.omit(df_foliar),aes(x=FERTILIZER_SUM,y=NUTRIENT_AMOUNT)) +
geom_point() +
theme_bw() +
ylab("Foliar nutrient amount") +
xlab("Monthly fertilizer spend (MYR/ha)") +
facet_wrap(vars(NUTRIENT),scales="free")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("installr")
library(installr)
updateR()
.libPaths()
install.packages("installr")
library("installr")
?copy.packages.between.libraries()
copy.packages.between.libraries("C:/Users/Sensonomic Admin/Documents/R/win-library/3.4","C:/Users/Sensonomic Admin/Documents/R/win-library/3.6")
copy.packages.between.libraries("C:/Users/Sensonomic Admin/Documents/R/win-library/3.4/","C:/Users/Sensonomic Admin/Documents/R/win-library/3.6/")
library("car")
library("car")
update.packages(checkBuilt=TRUE, ask=FALSE)
library(rgdal)
library(ggmap)
library(rgdal)
library(ggmap)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(rgdal)
library(ggmap)
library(rgdal)
library(ggmap)
library(devtools)
library(devtools)
library(rgdal)
install.packages("devtools")
update.packages(checkBuilt=TRUE, ask=FALSE)
library(devtools)
library(rgdal)
library(ggmap)
library(rgdal)
library(ggmap)
.libPaths()
library(rgdal)
library(ggmap)
update.packageStatus()
?update.packages
.libPaths()
?update.packages
library(rgdal)
library(ggmap)
update.packages(checkBuilt=TRUE, ask=FALSE)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(ggplot2)
library(rgdal)
library(ggmap)
library(rgdal)
library(ggmap)
library(devtools)
library(rgdal)
library(ggmap)
library(rgdal)
library(ggmap)
library(devtools)
devtools::install_github("dkahle/ggmap")
remove.packages("ggmap", lib="~/R/win-library/3.6")
library(ggmap)
library(raster)
library(gtools)
library(rgdal)
library(rasterVis)
library(gridExtra)
plot_list <- list()
communities <- c("Bandafassi","Makacoulibantang","Ndorna")
for (j in 1:length(communities)) {
file_list <- list.files(paste0("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_maps/world_raster_export_files_georeferenced_",tolower(communities[j])),
full.names = TRUE)
file_list <- mixedsort(file_list)
# show four steps
# file_list_sub <- file_list[grep("t1.asc|t6.asc|t11.|t17.asc",file_list)]
# show two steps
file_list_sub <- file_list[grep("t1.asc|t17.asc",file_list)]
rast_stack <- stack(file_list_sub)
rast_stack_rat <- stack()
for (i in 1:nlayers(rast_stack)) {
r <- raster(rast_stack,layer=i)
r <- ratify(r)
rat <- levels(r)[[1]]
rat$landcover <- c("undeveloped","paved roads","villages","unpaved roads","irrigated crops","rainfed crops","flood risk roads")
levels(r) <- rat
rast_stack_rat <- stack(rast_stack_rat,r)
}
plot_name <- paste( 'p', j, sep = '' )
# plot_titles <- c("2018","2023","2028","2035")
plot_titles <- c("2018","2035")
plot_list[[ plot_name ]] <- levelplot(rast_stack_rat,
col.regions=c("black","gray","red","tan3","forestgreen","lightgreen","cornflowerblue"),
names.attr=plot_titles)
}
dev.new(width=10,height=10,noRStudioGD = TRUE)
# lattice.options(
#   layout.heights=list(bottom.padding=list(x=0), top.padding=list(x=0)),
#   layout.widths=list(left.padding=list(x=0), right.padding=list(x=0))
# )
plot_list$p1$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
plot_list$p1$aspect.fill <- TRUE
plot_list$p2$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
plot_list$p2$aspect.fill <- TRUE
grid.arrange(plot_list$p1,plot_list$p2,
padding = unit(0, "line"))
plot_list$par.settings$layout.heights[
c( 'bottom.padding',
'top.padding',
'key.sub.padding',
'axis.xlab.padding',
'key.axis.padding',
'main.key.padding') ] <- 1
plot_list$aspect.fill <- TRUE
grid.arrange(plot_list,
padding = unit(0, "line"))
plot_list[[1]]
library(rgdal)
readOGR("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Sensonomic/Innoliva/innoliva_farms.shp")
innoliva <- readOGR("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Sensonomic/Innoliva/innoliva_farms.shp")
DPhil
innoliva <- readOGR("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Sensonomic/Innoliva/innoliva_farms.shp")
plot(innoliva)
bbox(innoliva)
crs(innoliva)
library(raster)
library(gtools)
library(rgdal)
library(rasterVis)
library(gridExtra)
# Generate intermediate maps plot list
plot_list <- list()
# communities <- c("Bandafassi","Makacoulibantang","Ndorna")
# communities <- c("Grid","Radial","Random")
communities <- c("Grid_distributed","Radial_distributed","Random_distributed")
for (j in 1:length(communities)) {
file_list <- list.files(paste0("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/world_raster_export_files_georeferenced_",tolower(communities[j])),
full.names = TRUE)
file_list <- mixedsort(file_list)
# show four steps
file_list_sub <- file_list[grep("t1.asc|t6.asc|t11.|t17.asc",file_list)]
rast_stack <- stack(file_list_sub)
rast_stack_rat <- stack()
for (i in 1:nlayers(rast_stack)) {
r <- raster(rast_stack,layer=i)
r <- ratify(r)
rat <- levels(r)[[1]]
rat$landcover <- c("undeveloped","paved roads","villages","unpaved roads","irrigated crops","rainfed crops","flood risk roads")
levels(r) <- rat
rast_stack_rat <- stack(rast_stack_rat,r)
}
plot_titles <- c("2018","2023","2028","2035")
plot_list[[j]] <- levelplot(rast_stack_rat,
col.regions=c("black","gray","red","tan3","forestgreen","lightgreen","cornflowerblue"),
names.attr=plot_titles)
}
# Plot intermediate maps plot list
folder_path <- "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/"
for (j in 1:length(communities)) {
file_path <- paste0(folder_path,communities[j],"_intermediate_maps_103119.png")
png(file_path,width=10,height=8,units="in",res=300)
print(plot_list[[j]])
dev.off()
}
# Generate trade off maps
plot_list <- list()
communities <- c("Grid_trade_offs","Radial_trade_offs","Random_trade_offs")
network_seeds_maps <- read.csv( "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/network_seeds_maps.csv")
for (j in 1:length(communities)) {
file_list <- list.files(paste0("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/world_raster_export_files_georeferenced_",tolower(communities[j])),
full.names = TRUE)
file_list <- mixedsort(file_list)
seeds_file_order <- as.numeric(gsub(".*?([0-9]+).*", "\\1", file_list))
seeds_RMSE_order <- network_seeds_maps[,j]
file_list <- file_list[order(match(seeds_file_order,seeds_RMSE_order))]
rast_stack <- stack(file_list)
rast_stack_rat <- stack()
for (i in 1:nlayers(rast_stack)) {
r <- raster(rast_stack,layer=i)
r <- ratify(r)
rat <- levels(r)[[1]]
rat$landcover <- c("undeveloped","paved roads","villages","unpaved roads","irrigated crops","rainfed crops","flood risk roads")
levels(r) <- rat
rast_stack_rat <- stack(rast_stack_rat,r)
}
plot_titles_seeds <- paste("seed",seeds_RMSE_order)
plot_titles <- paste0("Rank ",seq(1,60,5),": ",plot_titles_seeds)
rast_stack_rat_list <- list(rast_stack_rat[[1:6]],rast_stack_rat[[7:12]])
plot_titles_list <- list(plot_titles[1:6],plot_titles[7:12])
plot_list_sub <- list()
for (k in 1:2) {
plot_list_sub[[k]] <- levelplot(rast_stack_rat_list[[k]],
col.regions=c("black","gray","red","tan3","forestgreen","lightgreen","cornflowerblue"),
names.attr=plot_titles_list[[k]],
margin=FALSE)
}
plot_list[[j]] <- plot_list_sub
}
folder_path <- "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/"
for (j in 1:length(communities)) {
for (k in 1:2) {
file_path <- paste0(folder_path,communities[j],"_maps_",k,"_103019.png")
png(file_path,width=10,height=8,units="in",res=300)
print(plot_list[[j]][[k]])
dev.off()
}
}
library(raster)
library(gtools)
library(rgdal)
library(rasterVis)
library(gridExtra)
# Generate intermediate maps plot list
# Generate trade off maps
plot_list <- list()
communities <- c("Grid_trade_offs","Radial_trade_offs","Random_trade_offs")
network_seeds_maps <- read.csv( "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/network_seeds_maps.csv")
for (j in 1:length(communities)) {
file_list <- list.files(paste0("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/world_raster_export_files_georeferenced_",tolower(communities[j])),
full.names = TRUE)
file_list <- mixedsort(file_list)
seeds_file_order <- as.numeric(gsub(".*?([0-9]+).*", "\\1", file_list))
seeds_RMSE_order <- network_seeds_maps[,j]
file_list <- file_list[order(match(seeds_file_order,seeds_RMSE_order))]
rast_stack <- stack(file_list)
rast_stack_rat <- stack()
for (i in 1:nlayers(rast_stack)) {
r <- raster(rast_stack,layer=i)
r <- ratify(r)
rat <- levels(r)[[1]]
rat$landcover <- c("undeveloped","paved roads","villages","unpaved roads","irrigated crops","rainfed crops","flood risk roads")
levels(r) <- rat
rast_stack_rat <- stack(rast_stack_rat,r)
}
plot_titles_seeds <- paste("seed",seeds_RMSE_order)
plot_titles <- paste0("Rank ",seq(1,60,5),": ",plot_titles_seeds)
rast_stack_rat_list <- list(rast_stack_rat[[1:6]],rast_stack_rat[[7:12]])
plot_titles_list <- list(plot_titles[1:6],plot_titles[7:12])
plot_list_sub <- list()
for (k in 1:2) {
plot_list_sub[[k]] <- levelplot(rast_stack_rat_list[[k]],
col.regions=c("black","gray","red","tan3","forestgreen","lightgreen","cornflowerblue"),
names.attr=plot_titles_list[[k]],
margin=FALSE)
}
plot_list[[j]] <- plot_list_sub
}
folder_path <- "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/"
for (j in 1:length(communities)) {
for (k in 1:2) {
file_path <- paste0(folder_path,communities[j],"_maps_",k,"_110619.png")
png(file_path,width=10,height=8,units="in",res=300)
print(plot_list[[j]][[k]])
dev.off()
}
}
# Generate trade off maps
plot_list <- list()
communities <- c("Grid_trade_offs","Radial_trade_offs","Random_trade_offs")
network_seeds_maps <- read.csv( "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/network_seeds_maps.csv")
for (j in 1:length(communities)) {
file_list <- list.files(paste0("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/world_raster_export_files_georeferenced_",tolower(communities[j])),
full.names = TRUE)
file_list <- mixedsort(file_list)
seeds_file_order <- as.numeric(gsub(".*?([0-9]+).*", "\\1", file_list))
seeds_RMSE_order <- network_seeds_maps[,j]
file_list <- file_list[order(match(seeds_file_order,seeds_RMSE_order))]
rast_stack <- stack(file_list)
rast_stack_rat <- stack()
for (i in 1:nlayers(rast_stack)) {
r <- raster(rast_stack,layer=i)
r <- ratify(r)
rat <- levels(r)[[1]]
rat$landcover <- c("undeveloped","paved roads","villages","unpaved roads","irrigated crops","rainfed crops","flood risk roads")
levels(r) <- rat
rast_stack_rat <- stack(rast_stack_rat,r)
}
plot_titles_seeds <- paste("seed",seeds_RMSE_order)
plot_titles <- paste0("Rank ",seq(1,60,5),": ",plot_titles_seeds)
rast_stack_rat_list <- list(rast_stack_rat[[1:6]],rast_stack_rat[[7:12]])
plot_titles_list <- list(plot_titles[1:6],plot_titles[7:12])
plot_list_sub <- list()
for (k in 1:2) {
plot_list_sub[[k]] <- levelplot(rast_stack_rat_list[[k]],
col.regions=c("black","gray","red","tan3","forestgreen","lightgreen","cornflowerblue"),
names.attr=plot_titles_list[[k]],
margin=FALSE)
}
plot_list[[j]] <- plot_list_sub
}
folder_path <- "C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Intermediate_and_trade_off_maps/"
for (j in 1:length(communities)) {
for (k in 1:2) {
file_path <- paste0(folder_path,communities[j],"_maps_",k,"_112219.png")
png(file_path,width=10,height=8,units="in",res=300)
print(plot_list[[j]][[k]])
dev.off()
}
}
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(ggpubr)
# 1 - process data
setwd("C:/Users/Sensonomic Admin/Dropbox/Oxford/DPhil/Roads model/Investment_levels_plots/")
# fixed layouts
data <- read.csv("Ricescape_senegal_workshop_121718 investment_levels-spreadsheet.csv",header=FALSE,skip=6,nrows=13)
data <- t(data)
colnames(data) <- data[1,]
data <- data[-1,]
rownames(data) <- seq(1:nrow(data))
data <- as.data.frame(data,stringsAsFactors=FALSE)
data <- data %>%
mutate(`village-weight` = na_if(`village-weight`, ""),
`storage-weight` = na_if(`storage-weight`, ""),
`roads-investment` = na_if(`roads-investment`, ""),
environment = na_if(environment, "")) %>%
fill(`village-weight`,
`storage-weight`,
`roads-investment`,
environment)
data <- data %>%
mutate(scenarios = ifelse((data$`village-weight`==1 & data$`storage-weight`==0),"villages_prioritized",
ifelse((data$`village-weight`==0 & data$`storage-weight`==1),"storage_prioritized",
ifelse((data$`village-weight`==1 & data$`storage-weight`==1),"equal_priority","other"))))
drops <- c("scenarios","[reporter]","environment")
data[,!(names(data) %in% drops)] <- sapply(data[,!(names(data) %in% drops)],as.numeric)
data <- data %>%
filter(scenarios!="other")
col_names <- colnames(data)
col_names <- gsub("\\[|\\]|\"", "", col_names)
col_names <- gsub("-| ", "_", col_names)
colnames(data) <- col_names
# variable layouts
# worst case trade off for grid, radial, and random layouts
seed_data <- read.csv("Ricescape_senegal_workshop_121718 spatial_layouts_scaled.csv")
seed_data_filter <- filter(seed_data,(environment=="grid" & seed_value==26)|
(environment=="radial" & seed_value==95)|
(environment=="random" & seed_value==8))
# combine fixed and variable layouts data
data_combined <- rbind(data,seed_data_filter)
# continue preprocessing
data_combined <- rename(data_combined, Scenarios = scenarios)
data_combined$Scenarios <- recode_factor(data_combined$Scenarios,"villages_prioritized" = "Villages prioritized",
"equal_priority" = "Equal priority",
"storage_prioritized" = "Storage prioritized")
data_combined$environment <- recode_factor(data_combined$environment,"grid_distributed" = "grid distributed",
"radial_distributed" = "radial distributed",
"random_distributed" = "random distributed")
data_combined$environment <- paste0(toupper(substring(data_combined$environment, 1, 1)),substring(data_combined$environment,2))
data_combined$environment <- as.factor(data_combined$environment)
# set environments to plot
# environments <- c("Bandafassi", "Ndorna", "Makacoulibantang")
environments <- c("Grid", "Radial", "Random")
# environments <- c("Grid distributed", "Radial distributed", "Random distributed")
data_env_sub <- data_combined[data_combined$environment %in% environments,]
# 2 - plot data
# crop expansion plots
if ("Grid" %in% environments) {
y_labs <- c("Scaled villages connected","Scaled storage connected","Scaled crop expansion")
} else {
y_labs <- c("Villages connected","Storage connected (T)","Crop expansion (ha)")
}
villages_connected <- data_env_sub[data_env_sub$reporter=="villages-along-paved" ,]
villages_plot <- ggplot(villages_connected,aes(x=roads_investment,y=final,color=Scenarios)) +
geom_smooth() +
geom_point(position="jitter",alpha=0.1) +
# ylim(0,1) +
# facet_wrap(vars(environment)) +
facet_wrap(vars(environment), scales="free") +
ylab(y_labs[1]) +
xlab("") +
theme_bw() +
theme(legend.position="bottom")
storage_connected <- data_env_sub[data_env_sub$reporter=="storage-connected" ,]
storage_plot <- ggplot(storage_connected,aes(x=roads_investment,y=final,color=Scenarios)) +
geom_smooth() +
geom_point(position="jitter",alpha=0.1) +
# ylim(0,1) +
# facet_wrap(vars(environment)) +
facet_wrap(vars(environment), scales="free") +
ylab(y_labs[2]) +
xlab("") +
theme_bw()
crop_expansion <- data_env_sub[data_env_sub$reporter=="( count patches with [ farm > 0 ] - initial-farm-count ) * hectares-per-cell",]
expansion_plot <- ggplot(crop_expansion,aes(x=roads_investment,y=final,color=Scenarios)) +
geom_smooth() +
geom_point(position="jitter",alpha=0.1) +
# ylim(0,1) +
# facet_wrap(vars(environment)) +
facet_wrap(vars(environment), scales="free") +
ylab(y_labs[3]) +
xlab("Investment level (M CFA per year to 2035)") +
theme_bw()
dev.new(width=8,height=8,noRStudioGD = TRUE)
ggarrange(villages_plot,storage_plot,expansion_plot, ncol=1, nrow=3, labels="AUTO", common.legend = TRUE, legend="bottom")
